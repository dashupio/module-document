<page-document-view>
  <div>
    <div if={ props.altering } id="document" />
    <div if={ !props.altering } class="container">
      <raw data={ { html : getHtml() } } />
    </div>
  </div>

  <script>
    // base
    import { v4 as uuid } from 'uuid';

    // import base
    import Link from '@editorjs/link';
    import Code from '@editorjs/code';
    import List from '@editorjs/list';
    import html from 'editorjs-html';
    import Table from '@editorjs/table';
    import Quote from '@editorjs/quote';
    import Image from '@editorjs/image';
    import Embed from '@editorjs/embed';
    import Marker from '@editorjs/marker';
    import Header from '@editorjs/header';
    import Warning from '@editorjs/warning';
    import EditorJS from '@editorjs/editorjs';
    import Underline from '@editorjs/underline';
    import Delimiter from '@editorjs/delimiter';

    // export default
    export default class PageDocumentView {
      /**
       * on before mount
       *
       * @param {Object} props
       */
      onBeforeMount(props) {
        // set variables
        this.editor = false;
        this.parser = html();

        // bind
        this.init = this.init.bind(this);
        this.data = JSON.stringify(this.props.page.get('data.data') || {});

        // bind methods
        this.uploadByUrl = this.uploadByUrl.bind(this);
        this.uploadByFile = this.uploadByFile.bind(this);
      }
      
      /**
       * on mounted
       */
      onMounted() {
        // init summernote
        this.init();
      }
      
      /**
       * on mounted
       */
      onUpdated() {
        // init summernote
        this.init();
      }

      /**
       * on before unmount
       */
      onBeforeUnmount() {
        // destory
        if (this.editor && this.editor.disable) this.editor.disable();
      }

      /**
       * get html
       */
      getHtml() {
        // get html
        return this.props.page.get('data.html') ? this.props.page.get('data.html').join('') : this.props.page.get('data.document');
      }

      /**
       * new init logic
       */
      init() {
        // check altering
        if (!this.props.altering) return this.editor = null;

        // check exists
        if (this.editor) return;

        // get data
        this.editor = new EditorJS({
          holder   : this.$('#document'),
          tools    : {
            code      : Code,
            link      : Link,
            list      : List,
            quote     : Quote,
            table     : Table,
            header    : Header,
            marker    : Marker,
            warning   : Warning,
            underline : Underline,
            delimiter : Delimiter,

            embed : {
              class  : Embed,
              config : {
                services : {
                  coub    : true,
                  youtube : true,
                }
              },
              inlineToolbar : true
            },

            image : {
              class  : Image,
              config : {
                uploader : {
                  uploadByUrl  : this.uploadByUrl,
                  uploadByFile : this.uploadByFile,
                },
              }
            }
          },

          data : this.props.page.get('data.data'),

          onChange : async () => {
            // data
            const data = await this.editor.save();

            // get data
            if (JSON.stringify(data) === this.data) return;

            // set data
            this.data = JSON.stringify(data);

            // save
            this.props.data({
              data,
              html : this.parser.parse(await this.editor.save())
            });
          },

          onReady : async () => {
            // check html
            if (!this.rendered && !this.props.page.get('data.data') && this.props.page.get('data.document')) {
              // set rendered
              this.rendered = true;

              // from html
              this.editor.blocks.renderFromHTML(this.props.page.get('data.document'));
            }
          }
        });
      }

      /**
       * upload by url
       */
      async uploadByUrl (url) {
        // return uploaded
        return {
          file : {
            url,
          },
          success : 1,
        };
      }

      /**
       * on image upload
       *
       * @param {File} image
       */
      async uploadByFile (image) {
        // loop image
        if (!image) return;

        // create form data
        const data = new FormData();

        // append image
        data.append('file', image);
        data.append('temp', uuid());

        // submit ajax form
        const res = await fetch('/media/image', {
          body   : data,
          method : 'POST',
        });

        // await json
        const result = await res.json();

        // upload
        const { upload } = result;

        // return uploaded
        return {
          file : {
            url : upload.url,
          },
          success : 1,
        };
      }

      /**
      * set next
      *
      * @param {Object} next
      */
      shouldUpdate (newProps, currentProps) {
        // check next
        if (!this.editor || this.altering !== this.props.altering) {
          // altering
          this.altering = this.props.altering;

          // return true
          return true;
        }

        // return false
        return false;
      }
    }
  </script>

  <style>
    .container img {
      margin        : auto;
      margin-bottom : 1rem;
    }
  </style>
</page-document-view>